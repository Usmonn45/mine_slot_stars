// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
const SYMBOLS = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', '‚≠ê', '7Ô∏è‚É£'];
const BASE_WIN_STARS = 15;
const ATTEMPT_PRICES = {
    1: { stars: 1, amount: 1 },
    5: { stars: 4, amount: 5 },
    10: { stars: 7, amount: 10 }
};
const WITHDRAW_OPTIONS = [15, 25, 50];
const INITIAL_BALANCE = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å 0 –ø–æ–ø—ã—Ç–æ–∫

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userData = {
    id: null,
    balance: INITIAL_BALANCE,
    stars: 0,
    level: 1,
    referrals: 0,
    username: '–ò–≥—Ä–æ–∫',
    firstTime: true,
    bonusGiven: false
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    isSpinning: false,
    lastWin: 0,
    spinTimeout: null,
    slotAnimations: []
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    loadUserData();
    setupEventListeners();
    setupModalHandlers();
    setupReferralLink();
    updateUI();
    
    // –î–∞–µ–º –±–æ–Ω—É—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–∞–≤–∞–ª–∏
    if (userData.firstTime && !userData.bonusGiven) {
        giveInitialBonus();
    }
}

// –í—ã–¥–∞—á–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
function giveInitialBonus() {
    userData.balance += 10; // –î–∞–µ–º 10 –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    userData.bonusGiven = true;
    userData.firstTime = false;
    saveGameState();
    showToast("–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!");
    updateUI();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Telegram
    if (tg.initDataUnsafe?.user) {
        userData.id = tg.initDataUnsafe.user.id;
        userData.username = tg.initDataUnsafe.user.first_name;
        document.getElementById('username').textContent = userData.username;
        
        if (tg.initDataUnsafe.user.photo_url) {
            document.getElementById('user-avatar').src = tg.initDataUnsafe.user.photo_url;
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
    const savedData = localStorage.getItem('slotGameState');
    if (savedData) {
        try {
            const parsed = JSON.parse(savedData);
            userData.balance = parsed.balance || INITIAL_BALANCE;
            userData.stars = parsed.stars || 0;
            userData.level = parsed.level || 1;
            userData.referrals = parsed.referrals || 0;
            userData.firstTime = parsed.firstTime !== undefined ? parsed.firstTime : true;
            userData.bonusGiven = parsed.bonusGiven || false;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
        }
    }
    
    checkReferral();
    updateUI();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
function checkReferral() {
    const urlParams = new URLSearchParams(window.location.search);
    const refParam = urlParams.get('start');
    
    if (refParam && refParam.startsWith('ref_')) {
        const referrerId = refParam.split('_')[1];
        if (referrerId && referrerId !== userData.id?.toString()) {
            showToast(`–í—ã –∑–∞—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${referrerId}`);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        }
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
function setupReferralLink() {
    const refCode = userData.id ? `https://t.me/mine_stars_minenot_bot?start=ref_${userData.id}` : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    document.getElementById('referral-code').textContent = refCode;
    
    document.getElementById('copy-ref-btn').addEventListener('click', () => {
        copyToClipboard(refCode);
        showToast("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞");
    });
}

// –õ–æ–≥–∏–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
function spin() {
    if (gameState.isSpinning || userData.balance <= 0) return;
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    gameState.slotAnimations.forEach(clearTimeout);
    gameState.slotAnimations = [];
    if (gameState.spinTimeout) clearTimeout(gameState.spinTimeout);
    
    gameState.isSpinning = true;
    userData.balance--;
    updateUI();
    
    const slots = document.querySelectorAll('.slot');
    const results = [];
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    slots.forEach((slot, index) => {
        slot.innerHTML = '';
        slot.classList.add('spinning');
        
        const animTimeout = setTimeout(() => {
            const result = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
            results.push(result);
            slot.textContent = result;
            slot.classList.remove('spinning');
            
            if (index === slots.length - 1) {
                gameState.spinTimeout = setTimeout(() => {
                    checkWin(results);
                    gameState.isSpinning = false;
                    saveGameState();
                    updateUI();
                }, 500);
            }
        }, 1000 + (index * 500));
        
        gameState.slotAnimations.push(animTimeout);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
function checkWin(results) {
    if (results[0] === results[1] && results[1] === results[2]) {
        const starsWon = BASE_WIN_STARS * userData.level;
        userData.stars += starsWon;
        gameState.lastWin = starsWon;
        showWinAnimation(results.join(''), starsWon);
    } else {
        gameState.lastWin = 0;
    }
}

// –ü–æ–∫—É–ø–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
function buyAttempts(amount, starsPrice) {
    if (!tg.openInvoice) {
        showToast("–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram");
        return;
    }
    
    const invoice = {
        title: `–ü–æ–∫—É–ø–∫–∞ ${amount} –ø–æ–ø—ã—Ç–æ–∫`,
        description: `–í—ã –ø–æ–ª—É—á–∏—Ç–µ ${amount} –ø–æ–ø—ã—Ç–æ–∫ –≤ –∏–≥—Ä–µ`,
        currency: "USD",
        prices: [{ label: "Stars", amount: starsPrice * 100 }],
        payload: JSON.stringify({
            type: "buy_attempts",
            amount: amount
        })
    };
    
    tg.openInvoice(invoice, (status) => {
        if (status === 'paid') {
            userData.balance += amount;
            updateUI();
            saveGameState();
            showToast(`–£—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ ${amount} –ø–æ–ø—ã—Ç–æ–∫`);
        } else {
            showToast("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
        }
    });
}

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
function requestWithdraw(amount) {
    if (userData.stars < amount) {
        showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞");
        return;
    }
    
    const adminLink = "https://t.me/Usmon110";
    const message = `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount} ‚≠ê\nID: ${userData.id}\n–ù–∏–∫: ${userData.username}\n–°–≤—è–∑—å: ${adminLink}`;
    document.getElementById('withdraw-message').textContent = message;
    
    document.getElementById('copy-withdraw-btn').onclick = () => {
        copyToClipboard(message);
        showToast("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω");
    };
    
    if (tg.sendData) {
        tg.sendData(JSON.stringify({
            action: "withdraw",
            amount: amount,
            user_id: userData.id,
            username: userData.username
        }));
    }
    
    showToast(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
function copyToClipboard(text) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(text);
    } else {
        const textarea = document.createElement('textarea');
        textarea.value = text;
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand('copy');
        document.body.removeChild(textarea);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById('balance').textContent = userData.balance;
    document.getElementById('stars-count').textContent = userData.stars;
    document.getElementById('user-level').textContent = userData.level;
    document.getElementById('level').textContent = userData.level;
    document.getElementById('prize-info').textContent = `${BASE_WIN_STARS * userData.level}‚≠ê`;
    document.getElementById('referrals-count').textContent = userData.referrals;
    
    const spinBtn = document.getElementById('spin-button');
    spinBtn.textContent = userData.balance > 0 ? `–ö—Ä—É—Ç–∏—Ç—å (1 –ø–æ–ø—ã—Ç–∫–∞)` : "–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫";
    spinBtn.disabled = userData.balance <= 0 || gameState.isSpinning;
    
    updateLevelProgress();
}

function updateLevelProgress() {
    const progress = document.getElementById('level-progress');
    let required = 0, current = 0;
    
    if (userData.level === 1) {
        required = 50;
        current = userData.referrals;
    } else if (userData.level === 2) {
        required = 100;
        current = userData.referrals;
    } else {
        progress.value = 1;
        progress.max = 1;
        document.getElementById('level-status').textContent = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å";
        return;
    }
    
    progress.value = current;
    progress.max = required;
    document.getElementById('level-status').textContent = 
        `–ù—É–∂–Ω–æ –µ—â—ë ${required - current} –¥—Ä—É–∑–µ–π –¥–ª—è ${userData.level + 1} —É—Ä–æ–≤–Ω—è`;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
function setupEventListeners() {
    document.getElementById('spin-button').addEventListener('click', spin);
    
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            document.getElementById(btn.dataset.tab).classList.add('active');
        });
    });
}

function setupModalHandlers() {
    document.getElementById('buy-button').addEventListener('click', () => {
        document.getElementById('buy-modal').style.display = 'block';
    });
    
    document.getElementById('withdraw-button').addEventListener('click', () => {
        document.getElementById('withdraw-modal').style.display = 'block';
    });
    
    document.querySelectorAll('.close').forEach(btn => {
        btn.addEventListener('click', () => {
            btn.closest('.modal').style.display = 'none';
        });
    });
    
    document.querySelectorAll('.offer').forEach(offer => {
        offer.addEventListener('click', () => {
            const amount = parseInt(offer.dataset.offer);
            const stars = parseInt(offer.dataset.stars);
            buyAttempts(amount, stars);
            document.getElementById('buy-modal').style.display = 'none';
        });
    });
    
    document.querySelectorAll('.withdraw-option').forEach(option => {
        option.addEventListener('click', () => {
            const amount = parseInt(option.dataset.amount);
            requestWithdraw(amount);
        });
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveGameState() {
    localStorage.setItem('slotGameState', JSON.stringify({
        balance: userData.balance,
        stars: userData.stars,
        level: userData.level,
        referrals: userData.referrals,
        firstTime: userData.firstTime,
        bonusGiven: userData.bonusGiven
    }));
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showWinAnimation(combination, stars) {
    const popup = document.createElement('div');
    popup.className = 'win-popup';
    popup.innerHTML = `
        <h2>–ü–æ–±–µ–¥–∞!</h2>
        <div class="win-combination">${combination}</div>
        <p>+${stars} ‚≠ê</p>
        <p>–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: ${userData.stars} ‚≠ê</p>
    `;
    document.body.appendChild(popup);
    setTimeout(() => popup.remove(), 3000);
}

function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
}
// ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤—ë–∑–¥ —Å —Å–ø–∏—Å–∞–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞
function requestWithdraw(amount) {
    if (userData.stars < amount) {
        showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞");
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã —Å—Ä–∞–∑—É
    userData.stars -= amount;
    saveGameState();
    updateUI();
    
    const adminLink = "https://t.me/usmon110";
    const message = `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount} ‚≠ê\nID: ${userData.id}\n–ù–∏–∫: ${userData.username}\n–°–≤—è–∑—å: ${adminLink}\n–û—Å—Ç–∞—Ç–æ–∫ –∑–≤—ë–∑–¥: ${userData.stars}`;
    document.getElementById('withdraw-message').textContent = message;
    
    document.getElementById('copy-withdraw-btn').onclick = () => {
        copyToClipboard(message);
        showToast("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω");
    };
    
    if (tg.sendData) {
        tg.sendData(JSON.stringify({
            action: "withdraw",
            amount: amount,
            user_id: userData.id,
            username: userData.username,
            remaining_stars: userData.stars
        }));
    }
    
    showToast(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∏—Å–∞–Ω–æ ${amount}‚≠ê`);
    document.getElementById('withdraw-modal').style.display = 'none';
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// ...

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', initGame);