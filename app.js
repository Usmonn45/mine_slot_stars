// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
const SYMBOLS = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', '‚≠ê', '7Ô∏è‚É£'];
const BASE_WIN_STARS = 15;
const BOT_USERNAME = 'mine_stars_minenot_bot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —é–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const PAYMENT_PRICES = {
  1: 100,  // 1 –ø–æ–ø—ã—Ç–∫–∞ = 1 –∑–≤–µ–∑–¥–∞ (100 —Ü–µ–Ω—Ç–æ–≤)
  5: 400,  // 5 –ø–æ–ø—ã—Ç–æ–∫ = 4 –∑–≤–µ–∑–¥—ã
  10: 700  // 10 –ø–æ–ø—ã—Ç–æ–∫ = 7 –∑–≤–µ–∑–¥
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
  isSpinning: false,
  lastWin: 0,
  paymentInProgress: false
};

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userData = {
  id: tg.initDataUnsafe?.user?.id,
  balance: 0,
  stars: 0,
  level: 1,
  referrals: 0,
  username: tg.initDataUnsafe?.user?.first_name || '–ò–≥—Ä–æ–∫'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', async () => {
  document.getElementById('preloader').style.display = 'none';
  await loadUserData();
  setupEventListeners();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  checkPaymentStatus();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
function checkPaymentStatus() {
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('payment') === 'success') {
    showToast('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
    createConfetti();
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
  if (!userData.id) {
    showToast("–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram");
    return;
  }

  try {
    const response = await fetch(`/api/user?user_id=${userData.id}`);
    if (response.ok) {
      const data = await response.json();
      Object.assign(userData, data);
      updateUI();
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", e);
    showToast("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
  }
}

// –ü–æ–∫—É–ø–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram Stars
async function buyAttempts(amount) {
  if (gameState.paymentInProgress) return;
  gameState.paymentInProgress = true;

  const price = PAYMENT_PRICES[amount];
  if (!price) {
    gameState.paymentInProgress = false;
    return;
  }

  if (!tg?.openInvoice) {
    showToast("–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É –≤ Telegram");
    gameState.paymentInProgress = false;
    return;
  }

  try {
    const invoiceLink = `https://t.me/${BOT_USERNAME}?start=pay_${amount}`;
    
    tg.openInvoice(invoiceLink, async (status) => {
      if (status === 'paid') {
        try {
          // –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä-–±–æ—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          await fetch('https://–í–ê–®_–ê–î–†–ï–°_–ë–û–¢–ê/api/sync', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              id: userData.id,
              balance: userData.balance + amount,
              stars: userData.stars
            })
          });
          // –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await loadUserData();
          showToast(`–ü–æ–ª—É—á–µ–Ω–æ ${amount} –ø–æ–ø—ã—Ç–æ–∫!`);
          createConfetti();
          window.history.replaceState({}, '', window.location.pathname);
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º:", e);
          showToast("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Telegram");
        }
      } else {
        showToast("–û–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      }
      gameState.paymentInProgress = false;
    });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:", e);
    showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞");
    gameState.paymentInProgress = false;
  }
}

// –õ–æ–≥–∏–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤
function spin(allAttempts = false) {
  if (gameState.isSpinning || userData.balance <= 0) return;

  gameState.isSpinning = true;
  const attemptsToUse = allAttempts ? userData.balance : 1;
  userData.balance -= attemptsToUse;

  const slots = document.querySelectorAll('.slot');
  const results = [];

  slots.forEach((slot, index) => {
    slot.textContent = '';
    slot.classList.add('spinning');

    setTimeout(() => {
      const result = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
      results.push(result);
      slot.textContent = result;
      slot.classList.remove('spinning');

      if (index === slots.length - 1) {
        checkWin(results, attemptsToUse);
        gameState.isSpinning = false;
        updateUserData();
      }
    }, 1000 + (index * 500));
  });

  updateUI();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
function checkWin(results, attemptsUsed) {
  if (results[0] === results[1] && results[1] === results[2]) {
    const starsWon = BASE_WIN_STARS * userData.level * attemptsUsed;
    userData.stars += starsWon;
    gameState.lastWin = starsWon;
    showWinAnimation(results.join(''), starsWon);
    createConfetti();
    updateUserData();
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserData() {
  try {
    await fetch('/api/update', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userData)
    });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", e);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  // –ö–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
  document.getElementById('spin-button').addEventListener('click', () => spin());
  document.getElementById('spin-all-button').addEventListener('click', () => spin(true));

  // –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
  document.getElementById('buy-button').addEventListener('click', () => {
    document.getElementById('buy-modal').style.display = 'block';
  });

  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
  document.querySelectorAll('.offer').forEach(offer => {
    offer.addEventListener('click', () => {
      const amount = parseInt(offer.dataset.offer);
      buyAttempts(amount);
      document.getElementById('buy-modal').style.display = 'none';
    });
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  document.querySelectorAll('.modal .close').forEach(btn => {
    btn.addEventListener('click', () => {
      btn.closest('.modal').style.display = 'none';
    });
  });

  // –í–∫–ª–∞–¥–∫–∏
  document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
      });
      
      document.getElementById(btn.dataset.tab).classList.add('active');
    });
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
  document.getElementById('balance').textContent = userData.balance;
  document.getElementById('stars-count').textContent = userData.stars;
  document.getElementById('user-level').textContent = userData.level;
  document.getElementById('referrals-count').textContent = userData.referrals;

  // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  document.getElementById('username').textContent = userData.name || userData.username || '–ò–≥—Ä–æ–∫';

  // –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const avatarEl = document.getElementById('user-avatar');
  if (userData.avatar) {
    avatarEl.src = `https://api.telegram.org/file/bot${BOT_TOKEN}/${userData.avatar}`;
  } else {
    avatarEl.src = 'default_avatar.png';
  }

  // –ö–Ω–æ–ø–∫–∏ –≤—Ä–∞—â–µ–Ω–∏—è
  const spinBtn = document.getElementById('spin-button');
  spinBtn.textContent = userData.balance > 0 ? "–ö—Ä—É—Ç–∏—Ç—å (1 –ø–æ–ø—ã—Ç–∫–∞)" : "–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫";
  spinBtn.disabled = userData.balance <= 0 || gameState.isSpinning;

  const spinAllBtn = document.getElementById('spin-all-button');
  spinAllBtn.textContent = userData.balance > 0 ? `–ö—Ä—É—Ç–∏—Ç—å –≤—Å–µ (${userData.balance})` : "–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫";
  spinAllBtn.disabled = userData.balance <= 0 || gameState.isSpinning;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showToast(message) {
  const toast = document.createElement('div');
  toast.className = 'toast';
  toast.textContent = message;
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 3000);
}

function showWinAnimation(combination, stars) {
  const popup = document.createElement('div');
  popup.className = 'win-popup';
  popup.innerHTML = `
    <h2>–ü–æ–±–µ–¥–∞!</h2>
    <div class="win-combination">${combination}</div>
    <p>+${stars} ‚≠ê</p>
  `;
  document.body.appendChild(popup);
  setTimeout(() => popup.remove(), 3000);
}

function createConfetti() {
  const colors = ['#f1c40f', '#e67e22', '#2ecc71', '#3498db', '#9b59b6'];
  
  for (let i = 0; i < 50; i++) {
    const confetti = document.createElement('div');
    confetti.className = 'confetti';
    confetti.style.left = `${Math.random() * 100}vw`;
    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
    document.body.appendChild(confetti);
    
    setTimeout(() => confetti.remove(), 3000);
  }
}
